generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?        @db.VarChar(255)
  firstName     String?        @db.VarChar(100)
  lastName      String?        @db.VarChar(100)
  email         String         @unique(map: "email") @db.VarChar(255)
  phone         String?        @db.VarChar(20)
  password      String         @db.VarChar(255)
  role          Role?          @default(USER)
  createdAt     DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt     DateTime?      @default(now()) @updatedAt @db.Timestamp(0)
  appointments  Appointment[]
  notifications Notification[]

  @@index([email], map: "idx_users_email")
  @@index([role], map: "idx_users_role")
  @@map("users")
}

model Appointment {
  id            String             @id @default(cuid())
  patientName   String
  email         String
  phone         String
  department    String
  doctor        String
  date          DateTime           @db.Date
  time          String
  symptoms      String?            @db.Text
  status        AppointmentStatus @default(PENDING)
  priority      Priority          @default(NORMAL)
  notes         String?            @db.Text
  userId        String?
  reminderSent  Boolean           @default(false)
  reminderTime  DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Super Admin fields (add these if you want to keep the functionality)
  superAdminStatus        String?   @default("PENDING") // PENDING, APPROVED, REJECTED, COMMENTED
  superAdminFeedback      String?   @db.Text
  forwardedToSuperAdmin   Boolean   @default(false)

  // Relations
  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  notifications Notification[]

  @@map("appointments")
}

model Department {
  id             Int       @id @default(autoincrement())
  name           String    @unique(map: "name") @db.VarChar(100)
  description    String?   @db.Text
  headDoctor     String?   @db.VarChar(100)
  availableDays  String?   @default("Monday-Saturday") @db.VarChar(50)
  availableHours String?   @default("8:00 AM - 2:00 PM") @db.VarChar(50)
  isActive       Boolean?  @default(true)
  createdAt      DateTime? @default(now()) @db.Timestamp(0)
  updatedAt      DateTime? @default(now()) @updatedAt @db.Timestamp(0)
  doctors        Doctor[]

  @@index([isActive], map: "idx_departments_active")
  @@index([name], map: "idx_departments_name")
  @@map("departments")
}

model Doctor {
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(100)
  specialization  String     @db.VarChar(100)
  department      String     @db.VarChar(100)
  qualification   String?    @db.VarChar(200)
  experience      Int?       @default(0)
  availableDays   String?    @default("Monday-Saturday") @db.VarChar(50)
  availableHours  String?    @default("9:00 AM - 2:00 PM") @db.VarChar(50)
  consultationFee Decimal?   @default(0.00) @db.Decimal(10, 2)
  isActive        Boolean?   @default(true)
  createdAt       DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt       DateTime?  @default(now()) @updatedAt @db.Timestamp(0)
  departments     Department @relation(fields: [department], references: [name], onDelete: NoAction, map: "doctors_ibfk_1")

  @@index([isActive], map: "idx_doctors_active")
  @@index([department], map: "idx_doctors_department")
  @@map("doctors")
}

model Notification {
  id            Int               @id @default(autoincrement())
  userId        String?
  appointmentId String?
  type          NotificationType? @default(REMINDER)
  title         String            @db.VarChar(200)
  message       String            @db.Text
  sentAt        DateTime?         @db.Timestamp(0)
  isRead        Boolean?          @default(false)
  createdAt     DateTime?         @default(now()) @db.Timestamp(0)
  user          User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_ibfk_1")
  appointment   Appointment?      @relation(fields: [appointmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_ibfk_2")

  @@index([appointmentId], map: "idx_notifications_appointmentId")
  @@index([type], map: "idx_notifications_type")
  @@index([userId], map: "idx_notifications_userId")
  @@map("notifications")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationType {
  REMINDER
  CONFIRMATION
  CANCELLATION
  RESCHEDULED
}
